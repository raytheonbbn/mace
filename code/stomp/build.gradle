/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '1.2.4'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {

    id "org.ajoberstar.grgit" version "2.2.1"
    id "com.github.johnrengelman.shadow" version "6.0.0"
}

//if(JavaVersion.current() != JavaVersion.VERSION_1_8){
//    throw new GradleException("This build must be run with java 8 currently using: " + JavaVersion.current())
//}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: "eclipse"

apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 11
targetCompatibility = 11

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.

    jcenter()
    mavenCentral()

    flatDir {
        dirs 'libs'
    }

    maven {
        url file('mavenRepos')
    }
}


javadoc {

    title = 'CCAST Simulator v0.16.2'
    source = sourceSets.main.allJava
    destinationDir = file("javadoc")
    classpath = sourceSets.main.runtimeClasspath

    include( "com/bbn/ccast/*.java" )
    include( "com/bbn/ccast/comms/*.java" )
    include( "com/bbn/ccast/dispatcher/*.java" )
    include( "com/bbn/ccast/ros/*.java" )
    include( "com/bbn/ccast/sim/*.java" )
    include( "com/bbn/ccast/tactic/*.java" )
    include( "com/bbn/ccast/util/*.java" )
    include( "com/bbn/ccast/vehicle/*.java" )
    include( "com/bbn/spatialdatabase/*.java" )
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //runtime fileTree(dir: 'sprinter_dependencies', include: ['*.jar'])
    runtimeOnly( fileTree(dir: 'sprinter_tactics', include: ['*.jar']))


    implementation 'com.github.pcj:google-options:1.0.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.15.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.15.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.github.stampery:msgpack-rpc:0.7.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.8'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.3.2'
    implementation 'group:MAVLink:2.0'
    implementation 'group:MAVLink:2.0:javadoc'
    implementation 'javax.json:javax.json-api:1.1.2'
    implementation 'org.glassfish:javax.json:1.1.2'
    implementation 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'
    implementation 'org.gavaghan:geodesy:1.1.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.7'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.11.0'
    implementation group: 'com.massisframework.j3d', name: 'java3d-core', version: '1.6.0'
    implementation group: 'de.micromata.jak', name: 'JavaAPIforKml', version: '2.2.1'
    implementation group: 'org.locationtech.jts', name: 'jts-core', version: '1.16.0'
    implementation group: 'org.dockingframes', name: 'docking-frames-common', version: '1.1.1'
    implementation group: 'com.github.yannrichet', name: 'JMathPlot', version: '1.0.1'
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.0'
    implementation group: 'es.usc.citius.hipster', name: 'hipster-core', version: '1.0.1'
    implementation group: 'com.github.haifengl', name: 'smile-core', version: '1.5.2'
    implementation group: 'com.github.haifengl', name: 'smile-plot', version: '1.5.2'

    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'com.github.mreutegg', name: 'laszip4j', version: '0.7'
    implementation group: 'org.apache.commons', name: 'commons-imaging', version: '1.0-alpha1'
    implementation group: 'org.orbisgis', name: 'poly2tri-core', version: '0.1.2'


    // Fst, to replace built-in Java serialization
    implementation group: 'de.ruedigermoeller', name: 'fst', version: '2.56'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
    testCompileOnly('junit:junit:4.12')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.1.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0',
            'org.junit.platform:junit-platform-launcher:1.1.0',
            'org.junit.platform:junit-platform-runner:1.1.0')

    // Grgit for git usage
    implementation 'org.ajoberstar:grgit:2.2.1'

    // Network dependencies
    implementation name: 'pcap4j-core-1.7.4-SNAPSHOT'
    implementation name: 'pcap4j-packetfactory-propertiesbased-1.7.4-SNAPSHOT'
    implementation name: 'pcap4j-packetfactory-static-1.7.4-SNAPSHOT'
    implementation 'net.java.dev.jna:jna:4.2.1'
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.25'

    // https://mvnrepository.com/artifact/commons-net/commons-net
    implementation group: 'commons-net', name: 'commons-net', version: '3.6'

    // https://mvnrepository.com/artifact/org.apache.ftpserver/ftpserver-core
    implementation group: 'org.apache.ftpserver', name: 'ftpserver-core', version: '1.1.1'
    implementation group: 'org.apache.ftpserver', name: 'ftplet-api', version: '1.1.1'

    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

// https://mvnrepository.com/artifact/net.imagej/ij
    implementation group: 'net.imagej', name: 'ij', version: '1.53i'

    // https://mvnrepository.com/artifact/org.dom4j/dom4j
    implementation group: 'org.dom4j', name: 'dom4j', version: '2.1.3'

    // https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.5'


}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        // Make sure output from standard out or error is shown in Gradle output
        showStandardStreams = true
    }
}

project.version = '0.1'
project.group = 'com.bbn.ccast'

test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

task copyToLib( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.runtimeClasspath
}

jar {
    dependsOn copyToLib
    baseName = 'ccast-protelis'
    version = project.version
    manifest {
        attributes 'Implementation-Title': 'CCAST Protelis',
                'Implementation-Version': project.version,
                'Main-Class': project.group + '.Main'
    }
}

task deleteReleaseCandidateContents(type: Delete) {
    def dirName = "ReleaseCandidate"

    doLast {

        file( dirName ).list().each{
            f ->
                delete "${dirName}/${f}"
        }
    }
}

tasks.withType(JavaCompile) { options.incremental = true }

tasks.withType(Javadoc) { options.addBooleanOption('Xdoclint:none', true) }

task copyCcastServicesRosFilesToRelease(type: Copy) {

    def ccastServicesPath = System.properties['user.home'] + '/rover/src/rover_ros/'
    from(ccastServicesPath)
    // I don't like having two copies of this - TODO consolidate/link
    include('ccast_services/')
    into('ReleaseCandidate/src/ros/src/')
}

task copySimRosFilesToRelease(type: Copy, dependsOn: [copyCcastServicesRosFilesToRelease]) {

    from ('../ros_sim/')
    include('src/ccast/')
    include('AirSim/')
    include('src/CMakeLists.txt')
    include('BuildRosNodes_release.sh')
    into('ReleaseCandidate/src/ros/')
}

task copyDocFilesToRelease(type: Copy) {

    from ('../doc/')
    include('README.txt')
    include('DISTRIBUTION.txt')
    include('ReleaseNotes.pdf')
    include('UserManual.pdf')

    into('ReleaseCandidate/')
}

task copySimFilesToRelease(type: Copy) {

    from ('../simulation/Unreal/')
    include('settings.json')
    include('settings_heavySim.json')

    into('ReleaseCandidate/')
}

task copyLicenseFilesToRelease(type: Copy) {

    from ('..')
    include('licenses/')

    into('ReleaseCandidate/')
}

task copyStubFilesToRelease(type: Copy) {

    from('stub/')
    include('localDevice.properties')

    into('ReleaseCandidate/')
}

task copyScriptFilesToRelease(type: Copy) {

    from('../scripts/')
    include('setup.sh')
    include('build.sh')

    into('ReleaseCandidate/')
}

task copyRoverFilesToRelease(type: Copy) {

    def homePath = System.properties['user.home']

    from(homePath)
    include('rover/')
    exclude 'rover/build/'
    exclude 'rover/build_isolated/'
    exclude 'rover/devel/'
    exclude 'rover/devel_isolated/'
    exclude 'rover/logs/'
    exclude 'rover/.vscode/'
    exclude 'rover/src/.vscode/'
    exclude 'rover/src/rover_ros/.git/'
    exclude 'rover/src/rover_ros/.gitignore'
    exclude 'rover/.catkin_workspace'
    exclude 'rover/src/*.sh'

    into('ReleaseCandidate/')
}

// Collect all files needed for a release
task copyFilesToMaceRelease(type: Copy) {

    from('.')

    include('build/')
    include('ccastConfig.properties')
    include('config/')
    include('libs/')
    include('localDevice.properties')
    include('regions/')
    include('ros_sim/')
    include('runLightweightRosStacks.sh')
    include('sim.properties')
    include('start.bat')
    include('startRosSim.sh')
    include('start.sh')
    include('stopRosSim.sh')
    include('startSim.sh')
    include('stomp_start_payloads.sh')
    include('stomp_start_targets.sh')
    include('stomp_stop_payloads.sh')
    include('stomp_stop_targets.sh')
    include('stopSim.sh')
    include('WorldWindData/')


    into('ReleaseCandidate/')
}

// Collect all files needed for a release
task copyFilesToRelease(type: Copy, dependsOn: [copySimRosFilesToRelease, copyDocFilesToRelease, copySimFilesToRelease, copyLicenseFilesToRelease, copyStubFilesToRelease, copyScriptFilesToRelease, copyRoverFilesToRelease]) {

    from('.')

    include('ccastConfig.properties')
    include('sim.properties')

    include('log4j-debug.properties')
    include('log4j-release.properties')

    include('capabilities.yaml')
    include('robot-params.yaml')
    include('sensor-params.yaml')
    include('planner-params.yaml')
    include('world-regions.yaml')

    include('platform-start-positions.yaml')

    include('april_tags.xml')

    include('start.sh')
    include('stop.sh')

    include('runRosSimNodes.sh')
    include('testRosLineOfSight.sh')
    include('testRosPlatformControl.sh')
    include('killRosNodes.sh')

    include('runVehicles.sh')
    include('runMultipleVehicles.sh')
    include('runMultipleLidars.sh')
    include('runOneLidar.sh')
    include('runOneCameraSet.sh')
    include('runMultipleCameraSets.sh')
    include('runLightweightRosStacks.sh')
    include('runMultipleVehicles.bat')
    include('loadProperties.bat')
    include('killVehicles.sh')

    include('demoCommands_Shelby.sh')

    include('program.pt')
    include('tactics.json')
    include('resources.json')
    include('runMultipleVehicles.sh')
    include('sprinter_tactics.json')

    include('ext/linux/')
    include('launch/')
    include('regions/')
    include('libs/')
    include('resources/')
    include('build/libs/')
    include('sprinter_tactics/')
    include('sprinter_dependencies/')

    include('javadoc/')

    // Include minimal set of terrain data
    include 'config/'
    exclude 'config/WorldWindInstalled/JBLM DTM'
    exclude 'config/WorldWindInstalled/LeschiTown'
    exclude 'config/WorldWindInstalled/LeschiTown DTED 2'

    into('ReleaseCandidate/')
}

task buildSimRosNodes(type:Exec) {
    // Build ROS nodes from the released source
    workingDir 'ReleaseCandidate/src/ros'
    commandLine './BuildRosNodes_release.sh'
}

task cleanRosBuild(type: Delete) {
    delete 'ReleaseCandidate/src/ros/build',
            'ReleaseCandidate/src/ros/devel',
            'ReleaseCandidate/src/ros/install',
            'ReleaseCandidate/src/ros/.catkin_workspace',
            'ReleaseCandidate/ros'
}


shadowJar {
    exclude 'sprinter_dependencies/**'
    exclude 'sprinter_tactics/**'
}

// Make sure we serialize properly; don't want to start copying before the build is done, e.g.!
jar.mustRunAfter clean
shadowJar.mustRunAfter clean
copyFilesToMaceRelease.mustRunAfter clean, shadowJar, javadoc, deleteReleaseCandidateContents
copyFilesToRelease.mustRunAfter clean, shadowJar, javadoc, deleteReleaseCandidateContents
buildSimRosNodes.mustRunAfter copyFilesToRelease
cleanRosBuild.mustRunAfter buildSimRosNodes

task assembleRelease(dependsOn: [clean, jar, shadowJar, javadoc, deleteReleaseCandidateContents, copyFilesToMaceRelease]) {
    doLast {

        // Note Git SHA
        version = "${grgit.branch.current().getName()}:${grgit.head().abbreviatedId}"
        new File("ReleaseCandidate/version.txt").text = """$version"""
        println "Completed release of version on branch ${grgit.branch.current().getName()} with SHA ${grgit.head().abbreviatedId}"
    }
}

//task assembleRelease(dependsOn: [clean, shadowJar, javadoc, deleteReleaseCandidateContents, copyFilesToRelease, buildSimRosNodes, cleanRosBuild]) {
//    doLast {
//
//        // Note Git SHA
//        version = "${grgit.branch.current().getName()}:${grgit.head().abbreviatedId}"
//        new File("ReleaseCandidate/version.txt").text = """$version"""
//        println "Completed release of version on branch ${grgit.branch.current().getName()} with SHA ${grgit.head().abbreviatedId}"
//    }
//}
