
<launch>

  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

  <!-- <arg name="device_type_camera1"    		default="t2.5"/> -->
  <arg name="device_type_camera2"    		default="d4.5"/>		<!-- Note: using regular expression. match D435, D435i, D415... -->
  <!-- <arg name="serial_no_camera1"    			default=""/> -->
  <arg name="serial_no_camera2"    			default=""/>
  <!-- <arg name="camera1"              			default="tracking"/> -->
  <arg name="camera2"              			default="camera"/>
  <!-- <arg name="tf_prefix_camera1"         default="$(arg camera1)"/> -->
  <arg name="tf_prefix_camera2"         default="$(arg camera2)"/>
  <arg name="initial_reset"             default="false"/>
  <arg name="enable_fisheye"            default="false"/>
  <arg name="color_width"               default="640"/>
  <arg name="color_height"              default="480"/>
  <arg name="depth_width"               default="640"/>
  <arg name="depth_height"              default="480"/>
  <arg name="clip_distance"             default="3.0"/>
  <!-- <arg name="topic_odom_in"             default=""/>
  <arg name="calib_odom_file"           default=""/>
  <arg name="publish_tf"                default="false"/>
  <arg name="publish_odom_tf"           default="false"/>
  <remap from="/tracking/camera/odom/sample" to="/odom_vision"/> -->

  <!-- <group ns="$(arg camera1)">
    <include file="$(find rover_launcher)/launch/realsense_tracking.launch" >
      <arg name="initial_reset"         value="$(arg initial_reset)"/>
      <arg name="device_type"           value="$(arg device_type_camera1)"/>
      <arg name="serial_no"             value="$(arg serial_no_camera1)"/>
      <arg name="tf_prefix"         		value="$(arg tf_prefix_camera1)"/>
      <arg name="enable_fisheye1"       value="$(arg enable_fisheye)"/>
      <arg name="enable_fisheye2"       value="$(arg enable_fisheye)"/>
      <arg name="fisheye_fps"           value="30"/>
      <arg name="gyro_fps"              value="30"/>
      <arg name="accel_fps"             value="62"/>
      <arg name="enable_gyro"           value="false"/>
      <arg name="enable_accel"          value="false"/>
      <arg name="publish_odom_tf"       value="false"/>
      <arg name="enable_pose"           value="true"/>
      <arg name="odom_frame_id"         value="odom"/>
      <arg name="pose_frame_id"         value="base_link"/>
    </include>
  </group> -->

  <group ns="$(arg camera2)">
    <include file="$(find rover_launcher)/params/nodelet.launch.xml">
      <arg name="device_type"       value="$(arg device_type_camera2)"/>
      <arg name="serial_no"         value="$(arg serial_no_camera2)"/>
      <arg name="color_width"       value="$(arg color_width)"/>
      <arg name="color_height"      value="$(arg color_height)"/>
      <arg name="depth_width"       value="$(arg depth_width)"/>
      <arg name="depth_height"      value="$(arg depth_height)"/>
      <arg name="clip_distance"     value="$(arg clip_distance)"/>
      <arg name="initial_reset"     value="$(arg initial_reset)"/>
      <arg name="depth_fps"         value="6"/>
      <arg name="color_fps"         value="6"/>
      <arg name="manager"           value="pcl_manager"/>
      <arg name="json_file_path"    value=""/>
      <arg name="enable_depth"      value="true"/>
      <arg name="enable_color"      value="true"/>
      <arg name="enable_infra1"     value="false"/>
      <arg name="enable_infra2"     value="false"/>
      <arg name="enable_fisheye"    value="false"/>
      <arg name="enable_gyro"       value="false"/>
      <arg name="enable_accel"      value="false"/>
      <arg name="enable_pointcloud" value="true"/>
      <arg name="enable_sync"       value="false"/>
      <arg name="filters"           value="decimation,spatial,temporal"/>
      <arg name="align_depth"       value="false"/>
      <arg name="tf_prefix"         value="camera"/>
    </include>

  </group>

  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input" to="/camera/depth/color/points" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.0
      filter_limit_max: 2.0
      filter_limit_negative: False
      leaf_size: 0.025
    </rosparam>
  </node>

  <node pkg="nodelet" type="nodelet" name="obstacles_detection" args="load rtabmap_ros/obstacles_detection pcl_manager" output="screen">
      <remap from="cloud"     to="/voxel_grid/output"/>
      <param name="frame_id"             type="string" value="camera_link"/>
      <param name="map_frame_id"         type="string" value="odom"/>
      <param name="wait_for_transform"   type="bool" value="true"/>
      <param name="Grid/MinClusterSize"     type="int" value="10"/>
      <param name="Grid/MaxObstacleHeight" type="double" value="0.150"/>
      <param name="Grid/CellSize"     type="double" value="0.025"/>
      <param name="Grid/ClusterRadius"     type="double" value="0.15"/>
      <param name="Grid/RangeMax"     type="double" value="3.0"/>
  </node>
</launch>
